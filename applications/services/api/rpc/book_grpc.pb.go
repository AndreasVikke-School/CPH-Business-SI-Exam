// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	// Returns msg with string
	WriteCsvToDb(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookTitle, error)
	GetBookByTitle(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*Book, error)
	GetBookSimpleByTitle(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimple, error)
	GetBooksBySearch(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookList, error)
	GetAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookList, error)
	// Parameters should be changed from title to isbn
	GetBookRecsAuthor(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimpleList, error)
	GetBookRecsYear(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimpleList, error)
	CheckoutBook(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookTitle, error)
	ReturnBook(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookTitle, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) WriteCsvToDb(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookTitle, error) {
	out := new(BookTitle)
	err := c.cc.Invoke(ctx, "/rpc.BookService/WriteCsvToDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookByTitle(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetBookByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookSimpleByTitle(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimple, error) {
	out := new(BookSimple)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetBookSimpleByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBooksBySearch(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetBooksBySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookRecsAuthor(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimpleList, error) {
	out := new(BookSimpleList)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetBookRecsAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookRecsYear(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookSimpleList, error) {
	out := new(BookSimpleList)
	err := c.cc.Invoke(ctx, "/rpc.BookService/GetBookRecsYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) CheckoutBook(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookTitle, error) {
	out := new(BookTitle)
	err := c.cc.Invoke(ctx, "/rpc.BookService/CheckoutBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ReturnBook(ctx context.Context, in *BookTitle, opts ...grpc.CallOption) (*BookTitle, error) {
	out := new(BookTitle)
	err := c.cc.Invoke(ctx, "/rpc.BookService/ReturnBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	// Returns msg with string
	WriteCsvToDb(context.Context, *emptypb.Empty) (*BookTitle, error)
	GetBookByTitle(context.Context, *BookTitle) (*Book, error)
	GetBookSimpleByTitle(context.Context, *BookTitle) (*BookSimple, error)
	GetBooksBySearch(context.Context, *BookTitle) (*BookList, error)
	GetAllBooks(context.Context, *emptypb.Empty) (*BookList, error)
	// Parameters should be changed from title to isbn
	GetBookRecsAuthor(context.Context, *BookTitle) (*BookSimpleList, error)
	GetBookRecsYear(context.Context, *BookTitle) (*BookSimpleList, error)
	CheckoutBook(context.Context, *BookTitle) (*BookTitle, error)
	ReturnBook(context.Context, *BookTitle) (*BookTitle, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) WriteCsvToDb(context.Context, *emptypb.Empty) (*BookTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCsvToDb not implemented")
}
func (UnimplementedBookServiceServer) GetBookByTitle(context.Context, *BookTitle) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByTitle not implemented")
}
func (UnimplementedBookServiceServer) GetBookSimpleByTitle(context.Context, *BookTitle) (*BookSimple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookSimpleByTitle not implemented")
}
func (UnimplementedBookServiceServer) GetBooksBySearch(context.Context, *BookTitle) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksBySearch not implemented")
}
func (UnimplementedBookServiceServer) GetAllBooks(context.Context, *emptypb.Empty) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedBookServiceServer) GetBookRecsAuthor(context.Context, *BookTitle) (*BookSimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookRecsAuthor not implemented")
}
func (UnimplementedBookServiceServer) GetBookRecsYear(context.Context, *BookTitle) (*BookSimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookRecsYear not implemented")
}
func (UnimplementedBookServiceServer) CheckoutBook(context.Context, *BookTitle) (*BookTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutBook not implemented")
}
func (UnimplementedBookServiceServer) ReturnBook(context.Context, *BookTitle) (*BookTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_WriteCsvToDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).WriteCsvToDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/WriteCsvToDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).WriteCsvToDb(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetBookByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookByTitle(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookSimpleByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookSimpleByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetBookSimpleByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookSimpleByTitle(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBooksBySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBooksBySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetBooksBySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBooksBySearch(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetAllBooks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookRecsAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookRecsAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetBookRecsAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookRecsAuthor(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookRecsYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookRecsYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/GetBookRecsYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookRecsYear(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_CheckoutBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CheckoutBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/CheckoutBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CheckoutBook(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BookService/ReturnBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ReturnBook(ctx, req.(*BookTitle))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteCsvToDb",
			Handler:    _BookService_WriteCsvToDb_Handler,
		},
		{
			MethodName: "GetBookByTitle",
			Handler:    _BookService_GetBookByTitle_Handler,
		},
		{
			MethodName: "GetBookSimpleByTitle",
			Handler:    _BookService_GetBookSimpleByTitle_Handler,
		},
		{
			MethodName: "GetBooksBySearch",
			Handler:    _BookService_GetBooksBySearch_Handler,
		},
		{
			MethodName: "GetAllBooks",
			Handler:    _BookService_GetAllBooks_Handler,
		},
		{
			MethodName: "GetBookRecsAuthor",
			Handler:    _BookService_GetBookRecsAuthor_Handler,
		},
		{
			MethodName: "GetBookRecsYear",
			Handler:    _BookService_GetBookRecsYear_Handler,
		},
		{
			MethodName: "CheckoutBook",
			Handler:    _BookService_CheckoutBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _BookService_ReturnBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
