// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttendanceCodeProtoClient is the client API for AttendanceCodeProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceCodeProtoClient interface {
	GetAttendanceCodeById(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*AttendanceCode, error)
	CreateAttendanceCode(ctx context.Context, in *AttendanceCodeCreate, opts ...grpc.CallOption) (*AttendanceCode, error)
}

type attendanceCodeProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceCodeProtoClient(cc grpc.ClientConnInterface) AttendanceCodeProtoClient {
	return &attendanceCodeProtoClient{cc}
}

func (c *attendanceCodeProtoClient) GetAttendanceCodeById(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*AttendanceCode, error) {
	out := new(AttendanceCode)
	err := c.cc.Invoke(ctx, "/rpc.AttendanceCodeProto/GetAttendanceCodeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceCodeProtoClient) CreateAttendanceCode(ctx context.Context, in *AttendanceCodeCreate, opts ...grpc.CallOption) (*AttendanceCode, error) {
	out := new(AttendanceCode)
	err := c.cc.Invoke(ctx, "/rpc.AttendanceCodeProto/CreateAttendanceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceCodeProtoServer is the server API for AttendanceCodeProto service.
// All implementations must embed UnimplementedAttendanceCodeProtoServer
// for forward compatibility
type AttendanceCodeProtoServer interface {
	GetAttendanceCodeById(context.Context, *wrappers.Int64Value) (*AttendanceCode, error)
	CreateAttendanceCode(context.Context, *AttendanceCodeCreate) (*AttendanceCode, error)
	mustEmbedUnimplementedAttendanceCodeProtoServer()
}

// UnimplementedAttendanceCodeProtoServer must be embedded to have forward compatible implementations.
type UnimplementedAttendanceCodeProtoServer struct {
}

func (UnimplementedAttendanceCodeProtoServer) GetAttendanceCodeById(context.Context, *wrappers.Int64Value) (*AttendanceCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceCodeById not implemented")
}
func (UnimplementedAttendanceCodeProtoServer) CreateAttendanceCode(context.Context, *AttendanceCodeCreate) (*AttendanceCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendanceCode not implemented")
}
func (UnimplementedAttendanceCodeProtoServer) mustEmbedUnimplementedAttendanceCodeProtoServer() {}

// UnsafeAttendanceCodeProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceCodeProtoServer will
// result in compilation errors.
type UnsafeAttendanceCodeProtoServer interface {
	mustEmbedUnimplementedAttendanceCodeProtoServer()
}

func RegisterAttendanceCodeProtoServer(s grpc.ServiceRegistrar, srv AttendanceCodeProtoServer) {
	s.RegisterService(&AttendanceCodeProto_ServiceDesc, srv)
}

func _AttendanceCodeProto_GetAttendanceCodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceCodeProtoServer).GetAttendanceCodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AttendanceCodeProto/GetAttendanceCodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceCodeProtoServer).GetAttendanceCodeById(ctx, req.(*wrappers.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceCodeProto_CreateAttendanceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttendanceCodeCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceCodeProtoServer).CreateAttendanceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AttendanceCodeProto/CreateAttendanceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceCodeProtoServer).CreateAttendanceCode(ctx, req.(*AttendanceCodeCreate))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceCodeProto_ServiceDesc is the grpc.ServiceDesc for AttendanceCodeProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceCodeProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AttendanceCodeProto",
	HandlerType: (*AttendanceCodeProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttendanceCodeById",
			Handler:    _AttendanceCodeProto_GetAttendanceCodeById_Handler,
		},
		{
			MethodName: "CreateAttendanceCode",
			Handler:    _AttendanceCodeProto_CreateAttendanceCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attendance_code.proto",
}
