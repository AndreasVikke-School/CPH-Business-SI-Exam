// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VinylServiceClient is the client API for VinylService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VinylServiceClient interface {
	GetVinyl(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*Vinyl, error)
	GetVinylByTitle(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*Vinyl, error)
	GetVinylSimpleByTitle(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimple, error)
	GetVinylsBySearch(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylList, error)
	GetAllVinyls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VinylList, error)
	// Parameters should be changed from title to isbn
	GetVinylRecsArtist(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimpleList, error)
	GetVinylRecsYear(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimpleList, error)
}

type vinylServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVinylServiceClient(cc grpc.ClientConnInterface) VinylServiceClient {
	return &vinylServiceClient{cc}
}

func (c *vinylServiceClient) GetVinyl(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*Vinyl, error) {
	out := new(Vinyl)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinyl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetVinylByTitle(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*Vinyl, error) {
	out := new(Vinyl)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinylByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetVinylSimpleByTitle(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimple, error) {
	out := new(VinylSimple)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinylSimpleByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetVinylsBySearch(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylList, error) {
	out := new(VinylList)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinylsBySearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetAllVinyls(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VinylList, error) {
	out := new(VinylList)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetAllVinyls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetVinylRecsArtist(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimpleList, error) {
	out := new(VinylSimpleList)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinylRecsArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vinylServiceClient) GetVinylRecsYear(ctx context.Context, in *VinylTitle, opts ...grpc.CallOption) (*VinylSimpleList, error) {
	out := new(VinylSimpleList)
	err := c.cc.Invoke(ctx, "/rpc.VinylService/GetVinylRecsYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VinylServiceServer is the server API for VinylService service.
// All implementations must embed UnimplementedVinylServiceServer
// for forward compatibility
type VinylServiceServer interface {
	GetVinyl(context.Context, *wrapperspb.Int64Value) (*Vinyl, error)
	GetVinylByTitle(context.Context, *VinylTitle) (*Vinyl, error)
	GetVinylSimpleByTitle(context.Context, *VinylTitle) (*VinylSimple, error)
	GetVinylsBySearch(context.Context, *VinylTitle) (*VinylList, error)
	GetAllVinyls(context.Context, *emptypb.Empty) (*VinylList, error)
	// Parameters should be changed from title to isbn
	GetVinylRecsArtist(context.Context, *VinylTitle) (*VinylSimpleList, error)
	GetVinylRecsYear(context.Context, *VinylTitle) (*VinylSimpleList, error)
	mustEmbedUnimplementedVinylServiceServer()
}

// UnimplementedVinylServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVinylServiceServer struct {
}

func (UnimplementedVinylServiceServer) GetVinyl(context.Context, *wrapperspb.Int64Value) (*Vinyl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinyl not implemented")
}
func (UnimplementedVinylServiceServer) GetVinylByTitle(context.Context, *VinylTitle) (*Vinyl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinylByTitle not implemented")
}
func (UnimplementedVinylServiceServer) GetVinylSimpleByTitle(context.Context, *VinylTitle) (*VinylSimple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinylSimpleByTitle not implemented")
}
func (UnimplementedVinylServiceServer) GetVinylsBySearch(context.Context, *VinylTitle) (*VinylList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinylsBySearch not implemented")
}
func (UnimplementedVinylServiceServer) GetAllVinyls(context.Context, *emptypb.Empty) (*VinylList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVinyls not implemented")
}
func (UnimplementedVinylServiceServer) GetVinylRecsArtist(context.Context, *VinylTitle) (*VinylSimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinylRecsArtist not implemented")
}
func (UnimplementedVinylServiceServer) GetVinylRecsYear(context.Context, *VinylTitle) (*VinylSimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinylRecsYear not implemented")
}
func (UnimplementedVinylServiceServer) mustEmbedUnimplementedVinylServiceServer() {}

// UnsafeVinylServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VinylServiceServer will
// result in compilation errors.
type UnsafeVinylServiceServer interface {
	mustEmbedUnimplementedVinylServiceServer()
}

func RegisterVinylServiceServer(s grpc.ServiceRegistrar, srv VinylServiceServer) {
	s.RegisterService(&VinylService_ServiceDesc, srv)
}

func _VinylService_GetVinyl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinyl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinyl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinyl(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetVinylByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VinylTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinylByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinylByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinylByTitle(ctx, req.(*VinylTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetVinylSimpleByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VinylTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinylSimpleByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinylSimpleByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinylSimpleByTitle(ctx, req.(*VinylTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetVinylsBySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VinylTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinylsBySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinylsBySearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinylsBySearch(ctx, req.(*VinylTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetAllVinyls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetAllVinyls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetAllVinyls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetAllVinyls(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetVinylRecsArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VinylTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinylRecsArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinylRecsArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinylRecsArtist(ctx, req.(*VinylTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VinylService_GetVinylRecsYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VinylTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinylServiceServer).GetVinylRecsYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VinylService/GetVinylRecsYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinylServiceServer).GetVinylRecsYear(ctx, req.(*VinylTitle))
	}
	return interceptor(ctx, in, info, handler)
}

// VinylService_ServiceDesc is the grpc.ServiceDesc for VinylService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VinylService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.VinylService",
	HandlerType: (*VinylServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVinyl",
			Handler:    _VinylService_GetVinyl_Handler,
		},
		{
			MethodName: "GetVinylByTitle",
			Handler:    _VinylService_GetVinylByTitle_Handler,
		},
		{
			MethodName: "GetVinylSimpleByTitle",
			Handler:    _VinylService_GetVinylSimpleByTitle_Handler,
		},
		{
			MethodName: "GetVinylsBySearch",
			Handler:    _VinylService_GetVinylsBySearch_Handler,
		},
		{
			MethodName: "GetAllVinyls",
			Handler:    _VinylService_GetAllVinyls_Handler,
		},
		{
			MethodName: "GetVinylRecsArtist",
			Handler:    _VinylService_GetVinylRecsArtist_Handler,
		},
		{
			MethodName: "GetVinylRecsYear",
			Handler:    _VinylService_GetVinylRecsYear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vinyl.proto",
}
