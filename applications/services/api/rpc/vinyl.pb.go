// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: vinyl.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VinylTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *VinylTitle) Reset() {
	*x = VinylTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vinyl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VinylTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VinylTitle) ProtoMessage() {}

func (x *VinylTitle) ProtoReflect() protoreflect.Message {
	mi := &file_vinyl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VinylTitle.ProtoReflect.Descriptor instead.
func (*VinylTitle) Descriptor() ([]byte, []int) {
	return file_vinyl_proto_rawDescGZIP(), []int{0}
}

func (x *VinylTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Vinyl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Artist      string `protobuf:"bytes,4,opt,name=artist,proto3" json:"artist,omitempty"`
	Amount      int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Year        int64  `protobuf:"varint,6,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *Vinyl) Reset() {
	*x = Vinyl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vinyl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vinyl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vinyl) ProtoMessage() {}

func (x *Vinyl) ProtoReflect() protoreflect.Message {
	mi := &file_vinyl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vinyl.ProtoReflect.Descriptor instead.
func (*Vinyl) Descriptor() ([]byte, []int) {
	return file_vinyl_proto_rawDescGZIP(), []int{1}
}

func (x *Vinyl) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vinyl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vinyl) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vinyl) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Vinyl) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Vinyl) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type VinylSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Artist string `protobuf:"bytes,3,opt,name=artist,proto3" json:"artist,omitempty"`
	Year   int64  `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *VinylSimple) Reset() {
	*x = VinylSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vinyl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VinylSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VinylSimple) ProtoMessage() {}

func (x *VinylSimple) ProtoReflect() protoreflect.Message {
	mi := &file_vinyl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VinylSimple.ProtoReflect.Descriptor instead.
func (*VinylSimple) Descriptor() ([]byte, []int) {
	return file_vinyl_proto_rawDescGZIP(), []int{2}
}

func (x *VinylSimple) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VinylSimple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VinylSimple) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *VinylSimple) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type VinylList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vinyls []*Vinyl `protobuf:"bytes,1,rep,name=vinyls,proto3" json:"vinyls,omitempty"`
}

func (x *VinylList) Reset() {
	*x = VinylList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vinyl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VinylList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VinylList) ProtoMessage() {}

func (x *VinylList) ProtoReflect() protoreflect.Message {
	mi := &file_vinyl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VinylList.ProtoReflect.Descriptor instead.
func (*VinylList) Descriptor() ([]byte, []int) {
	return file_vinyl_proto_rawDescGZIP(), []int{3}
}

func (x *VinylList) GetVinyls() []*Vinyl {
	if x != nil {
		return x.Vinyls
	}
	return nil
}

type VinylSimpleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vinyls []*VinylSimple `protobuf:"bytes,1,rep,name=vinyls,proto3" json:"vinyls,omitempty"`
}

func (x *VinylSimpleList) Reset() {
	*x = VinylSimpleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vinyl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VinylSimpleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VinylSimpleList) ProtoMessage() {}

func (x *VinylSimpleList) ProtoReflect() protoreflect.Message {
	mi := &file_vinyl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VinylSimpleList.ProtoReflect.Descriptor instead.
func (*VinylSimpleList) Descriptor() ([]byte, []int) {
	return file_vinyl_proto_rawDescGZIP(), []int{4}
}

func (x *VinylSimpleList) GetVinyls() []*VinylSimple {
	if x != nil {
		return x.Vinyls
	}
	return nil
}

var File_vinyl_proto protoreflect.FileDescriptor

var file_vinyl_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x69, 0x6e, 0x79, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x70, 0x63, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x22, 0x0a, 0x0a, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x5d, 0x0a, 0x0b, 0x56, 0x69, 0x6e, 0x79, 0x6c,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x2f, 0x0a, 0x09, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x76, 0x69, 0x6e, 0x79, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x52,
	0x06, 0x76, 0x69, 0x6e, 0x79, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x56, 0x69, 0x6e, 0x79, 0x6c,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x69,
	0x6e, 0x79, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x76, 0x69,
	0x6e, 0x79, 0x6c, 0x73, 0x32, 0x95, 0x03, 0x0a, 0x0c, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x69, 0x6e, 0x79,
	0x6c, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x12, 0x2e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x0a,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x12, 0x3a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x6e,
	0x79, 0x6c, 0x73, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x0e, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x69, 0x6e, 0x79, 0x6c,
	0x52, 0x65, 0x63, 0x73, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x69, 0x6e, 0x79, 0x6c, 0x52, 0x65, 0x63,
	0x73, 0x59, 0x65, 0x61, 0x72, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e, 0x79,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x6e,
	0x79, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0f, 0x5a, 0x04,
	0x2f, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vinyl_proto_rawDescOnce sync.Once
	file_vinyl_proto_rawDescData = file_vinyl_proto_rawDesc
)

func file_vinyl_proto_rawDescGZIP() []byte {
	file_vinyl_proto_rawDescOnce.Do(func() {
		file_vinyl_proto_rawDescData = protoimpl.X.CompressGZIP(file_vinyl_proto_rawDescData)
	})
	return file_vinyl_proto_rawDescData
}

var file_vinyl_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_vinyl_proto_goTypes = []interface{}{
	(*VinylTitle)(nil),            // 0: rpc.VinylTitle
	(*Vinyl)(nil),                 // 1: rpc.Vinyl
	(*VinylSimple)(nil),           // 2: rpc.VinylSimple
	(*VinylList)(nil),             // 3: rpc.VinylList
	(*VinylSimpleList)(nil),       // 4: rpc.VinylSimpleList
	(*wrapperspb.Int64Value)(nil), // 5: google.protobuf.Int64Value
	(*emptypb.Empty)(nil),         // 6: google.protobuf.Empty
}
var file_vinyl_proto_depIdxs = []int32{
	1, // 0: rpc.VinylList.vinyls:type_name -> rpc.Vinyl
	2, // 1: rpc.VinylSimpleList.vinyls:type_name -> rpc.VinylSimple
	5, // 2: rpc.VinylService.GetVinyl:input_type -> google.protobuf.Int64Value
	0, // 3: rpc.VinylService.GetVinylByTitle:input_type -> rpc.VinylTitle
	0, // 4: rpc.VinylService.GetVinylSimpleByTitle:input_type -> rpc.VinylTitle
	0, // 5: rpc.VinylService.GetVinylsBySearch:input_type -> rpc.VinylTitle
	6, // 6: rpc.VinylService.GetAllVinyls:input_type -> google.protobuf.Empty
	0, // 7: rpc.VinylService.GetVinylRecsArtist:input_type -> rpc.VinylTitle
	0, // 8: rpc.VinylService.GetVinylRecsYear:input_type -> rpc.VinylTitle
	1, // 9: rpc.VinylService.GetVinyl:output_type -> rpc.Vinyl
	1, // 10: rpc.VinylService.GetVinylByTitle:output_type -> rpc.Vinyl
	2, // 11: rpc.VinylService.GetVinylSimpleByTitle:output_type -> rpc.VinylSimple
	3, // 12: rpc.VinylService.GetVinylsBySearch:output_type -> rpc.VinylList
	3, // 13: rpc.VinylService.GetAllVinyls:output_type -> rpc.VinylList
	4, // 14: rpc.VinylService.GetVinylRecsArtist:output_type -> rpc.VinylSimpleList
	4, // 15: rpc.VinylService.GetVinylRecsYear:output_type -> rpc.VinylSimpleList
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_vinyl_proto_init() }
func file_vinyl_proto_init() {
	if File_vinyl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vinyl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VinylTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vinyl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vinyl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vinyl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VinylSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vinyl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VinylList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vinyl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VinylSimpleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vinyl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vinyl_proto_goTypes,
		DependencyIndexes: file_vinyl_proto_depIdxs,
		MessageInfos:      file_vinyl_proto_msgTypes,
	}.Build()
	File_vinyl_proto = out.File
	file_vinyl_proto_rawDesc = nil
	file_vinyl_proto_goTypes = nil
	file_vinyl_proto_depIdxs = nil
}
